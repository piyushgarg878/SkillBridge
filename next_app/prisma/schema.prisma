// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  password      String?  // Optional â€” only used for credentials provider
  accounts      Account[]
  sessions      Session[]
  recruiter     Recruiter?
  candidate     Candidate?
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  access_token       String? 
  expires_at         Int?
  user               User     @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}
// ... existing code ...
model Recruiter {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  name        String
  age         Int
  companyName String
  jobs        Job[]
}

model Candidate {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  name        String
  age         Int
  collegeName String
  applications Application[]
}

model Job {
  id            String      @id @default(cuid())
  jobName       String
  jobRole       String
  jobDescription String
  requirements  String
  location      String?
  salary        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  recruiterId   String
  recruiter     Recruiter   @relation(fields: [recruiterId], references: [id])
  applications  Application[]
}

model Application {
  id           String    @id @default(cuid())
  candidateId  String
  jobId        String
  resumeUrl    String
  status       String    @default("pending")
  coverLetter  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  candidate    Candidate @relation(fields: [candidateId], references: [id])
  job          Job       @relation(fields: [jobId], references: [id])
}
